import os
import logging
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from dotenv import load_dotenv

# -------------------
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(level=logging.INFO)

# -------------------
# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ config.env
load_dotenv('config.env')
API_TOKEN = os.getenv('API_TOKEN')

bot = Bot(token=API_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# -------------------
# –í –ø–∞–º—è—Ç–∏
support_messages = {}
# —Å—Ç—Ä—É–∫—Ç—É—Ä–∞:
# { "@nickname": { "5": [(chat_id, msg_id), ...], "10": [...], ... } }

# -------------------
# FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è
class SupportStates(StatesGroup):
    waiting_for_receiver = State()
    choosing_checkpoints = State()
    recording_voice = State()

class GetSupportStates(StatesGroup):
    running = State()

# -------------------
# –ö–Ω–æ–ø–∫–∏
main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üó£ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å"), KeyboardButton(text="üéß –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É")]
    ],
    resize_keyboard=True
)

finish_kb = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å")]],
    resize_keyboard=True
)

# -------------------
# –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —á–µ–∫–ø–æ–π–Ω—Ç–æ–≤
def parse_checkpoints(text: str):
    text = text.replace(" ", "")
    parts = text.split(",")
    return [p for p in parts if p.isdigit()]

# -------------------
# –ö–æ–º–∞–Ω–¥—ã
@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?", reply_markup=main_kb)

# -------------------
# –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å
@dp.message(F.text == "üó£ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å")
async def start_support(message: types.Message, state: FSMContext):
    await message.answer(
        "–í–≤–µ–¥–∏ –Ω–∏–∫–Ω–µ–π–º –¥—Ä—É–≥–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—á–µ—à—å –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä: @vasya):",
        reply_markup=ReplyKeyboardMarkup(keyboard=[], resize_keyboard=True)
    )
    await state.set_state(SupportStates.waiting_for_receiver)

@dp.message(SupportStates.waiting_for_receiver)
async def set_receiver(message: types.Message, state: FSMContext):
    receiver = message.text.strip()
    if not receiver.startswith("@"):
        await message.answer("–ù–∏–∫–Ω–µ–π–º –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å @ (–Ω–∞–ø—Ä–∏–º–µ—Ä: @vasya).")
        return
    await state.update_data(receiver=receiver)
    await message.answer(
        "–í–≤–µ–¥–∏ —á–µ–∫–ø–æ–π–Ω—Ç—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1,5,10,15):",
        reply_markup=ReplyKeyboardMarkup(keyboard=[], resize_keyboard=True)
    )
    await state.set_state(SupportStates.choosing_checkpoints)

@dp.message(SupportStates.choosing_checkpoints)
async def set_checkpoints(message: types.Message, state: FSMContext):
    checkpoints = parse_checkpoints(message.text)
    if not checkpoints:
        await message.answer("–ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª —á–µ–∫–ø–æ–π–Ω—Ç—ã. –í–≤–µ–¥–∏ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1,5,10,15).")
        return
    await state.update_data(checkpoints=checkpoints, current=0)
    data = await state.get_data()
    await message.answer(
        f"–ó–∞–ø–∏—à–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ –¥–ª—è —á–µ–∫–ø–æ–π–Ω—Ç–∞ {data['checkpoints'][0]} –∫–º (–∏–ª–∏ –Ω–∞–∂–º–∏ ‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å).",
        reply_markup=finish_kb
    )
    await state.set_state(SupportStates.recording_voice)

@dp.message(SupportStates.recording_voice, F.voice)
async def record_voice(message: types.Message, state: FSMContext):
    data = await state.get_data()
    receiver = data['receiver']
    checkpoints = data['checkpoints']
    current = int(data.get('current', 0))
    checkpoint = checkpoints[current]

    support_messages.setdefault(receiver, {}).setdefault(checkpoint, []).append((message.chat.id, message.message_id))

    await message.answer(f"–ì–æ–ª–æ—Å–æ–≤–æ–µ –¥–ª—è {checkpoint} –∫–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ ‚úÖ", reply_markup=finish_kb)

    if current + 1 < len(checkpoints):
        await state.update_data(current=current + 1)
        next_cp = checkpoints[current + 1]
        await message.answer(f"–¢–µ–ø–µ—Ä—å –∑–∞–ø–∏—à–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ –¥–ª—è {next_cp} –∫–º (–∏–ª–∏ –Ω–∞–∂–º–∏ ‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å).", reply_markup=finish_kb)
    else:
        await message.answer("–í—Å–µ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! üéâ", reply_markup=main_kb)
        await state.clear()

@dp.message(SupportStates.recording_voice, F.text == "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å")
async def finish_recording(message: types.Message, state: FSMContext):
    await message.answer("–ó–∞–ø–∏—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ! –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é.", reply_markup=main_kb)
    await state.clear()

@dp.message(SupportStates.recording_voice)
async def recording_non_voice(message: types.Message):
    await message.answer("–û–∂–∏–¥–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–º–∏–∫—Ä–æ—Ñ–æ–Ω) –∏–ª–∏ –Ω–∞–∂–º–∏ ‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å.", reply_markup=finish_kb)

# -------------------
# –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É
@dp.message(F.text == "üéß –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É")
async def get_support(message: types.Message, state: FSMContext):
    if not message.from_user.username:
        await message.answer("–£ —Ç–µ–±—è –Ω–µ—Ç –ø—É–±–ª–∏—á–Ω–æ–≥–æ @username –≤ Telegram. –£—Å—Ç–∞–Ω–æ–≤–∏ –µ–≥–æ –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
        return
    nickname = f"@{message.from_user.username}"
    await state.update_data(nickname=nickname)

    if nickname not in support_messages:
        await message.answer("–î–ª—è —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π üòî", reply_markup=main_kb)
        await state.clear()
        return

    checkpoints = sorted(support_messages[nickname].keys(), key=lambda x: int(x))
    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=f"{cp} –∫–º")] for cp in checkpoints] + [[KeyboardButton(text="üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏—Å—Ç–∞–Ω—Ü–∏—é")]],
        resize_keyboard=True
    )
    await message.answer("–ù–∞–∂–∏–º–∞–π –Ω–∞ —á–µ–∫–ø–æ–π–Ω—Ç—ã, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è üéß", reply_markup=kb)
    await state.set_state(GetSupportStates.running)

@dp.message(GetSupportStates.running, F.text == "üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏—Å—Ç–∞–Ω—Ü–∏—é")
async def finish_run(message: types.Message, state: FSMContext):
    await message.answer("üèÅüéâüéäü•≥üéà –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –æ–∫–æ–Ω—á–∞–Ω–∏–µ–º –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏! üéäüéâüèÜüéàü•≥", reply_markup=main_kb)
    await state.clear()

@dp.message(GetSupportStates.running)
async def send_support(message: types.Message, state: FSMContext):
    data = await state.get_data()
    nickname = data['nickname']
    selected = message.text.replace(" –∫–º", "").strip()

    if nickname not in support_messages or selected not in support_messages[nickname]:
        await message.answer("–î–ª—è —ç—Ç–æ–≥–æ —á–µ–∫–ø–æ–π–Ω—Ç–∞ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π üòî")
        return

    for chat_id, msg_id in support_messages[nickname][selected]:
        try:
            await bot.copy_message(chat_id=message.chat.id, from_chat_id=chat_id, message_id=msg_id)
        except Exception:
            logging.exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–¥–Ω–æ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π (–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–µ–Ω–æ).")

# -------------------
if __name__ == "__main__":
    try:
        asyncio.run(dp.start_polling(bot))
    except KeyboardInterrupt:
        logging.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
